@page "/task"
@page "/task/{id:int}"
@inject IProjectTaskService ProjectTaskService
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable
@attribute [Authorize]

@if (Id is null)
{
    <h1 class="display-6">Create Task</h1>
}
else
{
    <h1 class="display-6">Edit Task</h1>
}

<EditForm Model="ProjectTask" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div>
        <label for="startDate">Start</label>
        <InputDate id="startDate" Type="InputDateType.DateTimeLocal"
                   @bind-Value="ProjectTask.Start" class="form-control" />
    </div>
    <div>
        <label for="endDate">Start</label>
        <InputDate id="endDate" Type="InputDateType.DateTimeLocal"
                   @bind-Value="ProjectTask.End" class="form-control" />
    </div>
    <div>
        <label for="project">Project</label>
        <InputSelect id="project" @bind-Value="ProjectTask.ProjectId" class="form-control">
            @foreach (var project in ProjectService.Projects)
            {
                <option value="@project.Id">@project.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="() => ProjectTask.ProjectId" />
    </div>
    @if (Id is not null)
    {
        <button type="button" class="btn btn-danger mt-2 mx-1"
                @onclick="DeleteProjectTask">
            Delete
        </button>
    }
    <button type="submit" class="btn btn-primary mt-2">Submit</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    ProjectTaskRequest ProjectTask = new ProjectTaskRequest();

    protected override void OnInitialized()
    {
        ProjectService.OnChange += StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await ProjectTaskService.GetProjectTaskById((int)Id);
            ProjectTask = new ProjectTaskRequest
                {
                    End = result.End,
                    Start = result.Start,
                    ProjectId = result.Project.Id
                };
        }
    }

    async Task HandleSubmit()
    {
        if (Id is null)
        {
            await ProjectTaskService.CreateProjectTask(ProjectTask);
            NavigationManager.NavigateTo("/tasks");
        }
        else
        {
            await ProjectTaskService.UpdateProjectTask((int)Id, ProjectTask);
            NavigationManager.NavigateTo("/tasks");
        }
    }

    async Task DeleteProjectTask()
    {
        var confirmed = await JSRuntime
            .InvokeAsync<bool>("confirm", "Do you really want to delete this entry?");

        @if (Id is not null && confirmed)
        {
            await ProjectTaskService.DeleteProjectTask((int)Id);
            NavigationManager.NavigateTo("/tasks");
        }
    }

    public void Dispose()
    {
        ProjectService.OnChange -= StateHasChanged;
    }
}