@page "/tasks"
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IProjectTaskService ProjectTaskService
@inject NavigationManager NavigationManager
@implements IDisposable
@attribute [Authorize]

<PageTitle>Tasks</PageTitle>
<h1 class="display-6">Tasks</h1>

<ProjectSelector />

<button class="btn btn-primary mb-2" @onclick="CreateTask">
    Create Task
</button>

@* <QuickGrid Items="FilteredProjectTasks" Pagination="@pagination"> *@
    <QuickGrid Items="FilteredProjectTasks">
    <PropertyColumn Property="t => t.Start" />
    <PropertyColumn Property="t => t.End" />
    <PropertyColumn Property="t => GetDuration(t.Start, t.End)" Title="Duration" />
    <PropertyColumn Property="t => t.Project.Name" Title="Project">
        <ColumnOptions>
            <div>
                <input type="search" autofocus @bind="projectFilter" @bind:event="oninput"
                       placeholder="Project name..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <TemplateColumn>
        <button class="btn btn-primary"
                onclick="@(() => ShowProject(context.Project.Id))">
            View
            <i class="bi bi-search"></i>
        </button>
    </TemplateColumn>
    <TemplateColumn>
        <button class="btn btn-primary"
                onclick="@(() => EditProjectTask(context.Id))">
                Edit
            <i class="bi bi-pencil"></i>
        </button>
    </TemplateColumn>
</QuickGrid>

@* <Paginator Value="@pagination" /> *@

@if (projectId > 0)
{
    <ProjectDetails ProjectId="projectId" />
}

@code {
    int projectId = 0;
    private string? projectFilter;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    //GridItemsProvider<ProjectTaskResponse>? ProjectTaskProvider;


    IQueryable<ProjectTaskResponse> FilteredProjectTasks
    {
        get
        {
            var result = ProjectTaskService.ProjectTasks.AsQueryable();

            if (!string.IsNullOrWhiteSpace(projectFilter))
            {
                result = result.Where(t => t.Project.Name
                    .Contains(projectFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            return result;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ProjectTaskService.GetProjectTasksByProject(projectId);
        ProjectTaskService.OnChange += StateHasChanged;
    }

    private string GetDuration(DateTime? start, DateTime? end)
    {
        if (start != null && end != null)
        {
            var duration = end.Value - start.Value;
            var result = $"{duration.Hours}h {duration.Minutes}m";
            return result;
        }
        return string.Empty;
    }

    private void ShowProject(int id)
    {
        if (projectId == id)
            return;

        projectId = id;
        StateHasChanged();
    }

    public void Dispose()
    {
        ProjectTaskService.OnChange -= StateHasChanged;
    }

    private void CreateTask()
    {
        NavigationManager.NavigateTo("/task");
    }

    private void EditProjectTask(int id)
    {
        NavigationManager.NavigateTo($"/task/{id}");
    }
}
